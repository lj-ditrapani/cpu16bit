---------|---------|---------|---------|---------|---------|---------|--
http://jsfiddle.net/bL2eszp8/21

General
-------

16-bit CPU
16 X 16-bit registers and program counter (PC)
2^16 = 65,536 memory addresses (16-bit resolution)
16-bit memory cells
A word is 16 bits (2 bytes)
64 KWords = 128 KB = 1 M-bit
All instructions are 16 bits long
16 instructions (4-bit op-code)

20 MHz
10 Million instructions per second (min)

Triple ported register file
(2 reads, 1 write per clock)
CPLD like Control
10 function ALU (4 control bits)


Instruction Meaning
-------------------

0 END    Halt computer
1 HBY    High byte
2 LBY    Low byte
3 LOD    Load
4 STR    Store
5 ADD    
6 SUB    
7 ADI    Add 4-bit immediate
8 SBI    Subtract 4-bit immediate
9 AND    
A ORR    or
B XOR    exclusive or
C NOT    
D SHF    Shift
E BRN    Branch
F SPC    Save PC


Instruction operation
--------------------

0 END
1 HBY    immd8 -> RD[15-08]
2 LBY    immd8 -> RD[07-00]
3 LOD    M[R1] -> RD
4 STR    R2 -> M[R1]
5 ADD    RS1 + RS2 -> RD
6 SUB    RS1 - RS2 -> RD
7 ADI    RS1 + immd4 -> RD
8 SBI    RS1 - immd4 -> RD
9 AND    RS1 and RS2 -> RD
A ORR    RS1 or RS2 -> RD
B XOR    RS1 xor RS2 -> RD
C NOT    ! R1 -> RD
D SHF    S1 shifted by immd4 -> RD
E BRN    if (R1 matches NZP) or CV then (R2 -> PC)
F SPC    PC + 2 -> RD


SHF  Shift, zero fill
Carry contains bit of last bit shifted out
immd4 format
DAAA
D is direction:  0 left, 1 right
AAA is (amount - 1)
0-7  ->  1-8
Assembly:
SHF R3 L 2 RA ->  $D31A
SHF R7 R 7 R0 ->  $D7E0


BRN M---
M is mode
0NZP    0 is value mode (negative zero positive)
10VC    1 is flag mode (overflow carry)
0111    unconditional jump (jump if value is Neg, Zero or Positive
0000    never jump (no operation; NOP)
1000    jump if carry and overflow are *NOT* set (ignore value)
1011    jump if carry or overflow are set (probably useless)
1010    jump if overflow set (don't care about carry)
1001    jump if carry set (don't care about overflow)

Because you want to handle a carry or overflow situations differently
You may be interested in ensuring NO exceptions (1000). You probably
wouldn't know what to do if both exceptions happened;
just handle each separately
BRN 1011 is probably not useful.


Instruction format
------------------

        Mm Reg   01 02 03
0 END    - ----    0  0  0
1 HBY    - --W-   UC UC RD
2 LBY    - --W-   UC UC RD
3 LOD    R R-W-   RA  0 RD
4 STR    W RR--   RA R2  0
5 ADD    - RRW-   R1 R2 RD
6 SUB    - RRW-   R1 R2 RD
7 ADI    - R-W-   R1 UC RD
8 SBI    - R-W-   R1 UC RD
9 AND    - RRW-   R1 R2 RD
A ORR    - RRW-   R1 R2 RD
B XOR    - RRW-   R1 R2 RD
C NOT    - R-W-   R1  0 RD
D SHF    - R-W-   R1 DA RD
E BRN    - RR-W   RV RP cond
F SPC    - --W-    0  0 RD


Nibble 00:  op code
Nibble 01:  0, high nibble of 8-bit const, Memory address register,
            ALU input 1 register
Nibble 02:  0, low nibble of 8-bit const, data in register to STR DI,
            ALU input 2 register, unsigned const, dir & amount for SHF,
            PC address register
Nibble 03:  0, cond, destination register to WRITE to


Reg (1 clock)
Fetch instruction (memory read)       1 clock
Decode & Reg read & ALU & Reg write

STR (2 clocks)
Fetch instruction (memory read)       1 clock
Decode & Reg read
Memory write                          1 clock

LDR (2 clocks)
Fetch instruction (memory read)       1 clock
Decode & Reg read
Memory read & reg write               1 clock


Video
------------

Video Ram
Color are 16-bit
32 tile colors    32    Words
32 sprite colors  32    words
Single tile        8    Words   8 X 8 tile times 2 bits
                                (16 bits per word)
Tile index      2048    Words   256 tiles X 8 words
Each tile cell     1    Word    8 bit tile select +
        4 bit foreground color pair + 4 bit background color pair
Number of cells 2400    60 X 40
cell x y flip    300    Words   2 bit X 2,400 / 16
Sprites          256    attribute data for 128 sprites

                words
---------------------
Tile index      2,048
Grid cells      2,400
Cell x y flip     300
Sprites           256
Tile colors        32
Sprite colors      32
---------------------
Total           5,068

16 x 2 x 16-bit colors
(16 pairs of 16-bit colors)
4 bit color pair index
8x8 pixel tiles
256 tile index
60 x 40 chars/tiles
480 x 320 pixel screen
video RAM
5,068 Words (< 10 KB)

Sprites
128 sprites
2 words per sprite
256 words
Sprite data
position    color pairs    Mirrors    Tile  |  Total
x    y      1    2         x   y            |
6    6      4    4         1   1      8     |  30
30 bits < 2 words

Video hardware
--------------
Instead of doing copy over to video RAM, could use double buffer
So just swap buffers instead of doing copy; instantaneous!
Could do the same for all I/O.

First 90 ms of frame:  CPU controls RAM lines
Next 10 ms of frame:  CPU sleeps
    video chip controls RAM Address and data out lines
Video copies video RAM into local video ram (4,480 words)
Control returned to CPU
Video ram draws info to screen in continuous loop for next 90 ms

Video loop 1 (7 operations)
------------
1) Use row/col counters to load tile cell
2) Use tile slot color pair IDs to load 4 colors from color pairs
3) Use row/col counters and tile ID to load tile row
4) increment row/col counters as necessary
5) Switch buffers and goto 1)

Video loop 2 (8 operations)
------------
1) Draw 8 pixel row to screen (16-bit row)
2) Switch buffers Goto 1)

153 k cycles to complete
160 k * 6 = 960 k cycles
1.8 million cycles available


I/O
-----------

I/O
10 Million instructions per second
 1 Million instructions per frame
   100 K instructions for I/O per frame
    10 K I/O operations per frame
       4,480 video output
       500 sound (20 changes of 20 registers)
       5K Network/HDD access (1K each read, 1K each write?)
       10 operation for keyboard input (10 key down, 10 key up)
                1 byte per action: first bit up or down,
                                   next seven = key code
                Saves up to 20 actions, anymore are dumped


Words
  512 Sound out   
   10 Keyboard input (20 actions per frame/200 actions per second)
2,048 Network I/O (1K read, 1K write)
2,048 HDD or SD card I/O (1K read, 1K write)
5,068 Video out
    1 Frame interrupt enable (or 16 I/O control flags?)
    1 Frame interrupt vector
    6 Debug I/O streams
